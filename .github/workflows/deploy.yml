name: Build & Deploy Kudos Bot

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  IMAGE: helsinki253/kudos-bot

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU (optional)
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & push image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE }}:latest
            ${{ env.IMAGE }}:${{ github.sha }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: SSH to VPS and deploy
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            set -euo pipefail
            mkdir -p /apps/kudos-bot && cd /apps/kudos-bot

            if [ ! -f .env ]; then
              echo "ERROR: /apps/kudos-bot/.env is missing." >&2
              exit 1
            fi

            cat > docker-compose.prod.yml <<'YAML'
            services:
              kudos-bot:
                image: helsinki253/kudos-bot:latest
                container_name: kudos-bot
                env_file:
                  - .env
                volumes:
                  - kudos_db:/data
                  - ./exports:/exports
                restart: unless-stopped
                healthcheck:
                  test: ["CMD", "curl", "-fsS", "http://127.0.0.1:8080/health"]
                  interval: 30s
                  timeout: 3s
                  retries: 3
            volumes:
              kudos_db:
            YAML

            mkdir -p exports

            echo "${DOCKERHUB_TOKEN}" | docker login -u "${DOCKERHUB_USERNAME}" --password-stdin

            docker compose -f docker-compose.prod.yml pull
            docker compose -f docker-compose.prod.yml up -d
            docker system prune -f
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
