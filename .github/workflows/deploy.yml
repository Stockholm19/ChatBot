name: Build & Deploy

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  DOCKER_IMAGE: ${{ secrets.DOCKER_IMAGE }}
  VPS_APP_DIR: ${{ secrets.VPS_APP_DIR }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      build_duration: ${{ steps.build_duration.outputs.duration }}
    steps:
      - name: Mark build start time
        id: bt0
        run: echo "start=$(date +%s)" >> $GITHUB_OUTPUT

      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & push image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}:latest
            ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Calculate build duration
        id: build_duration
        run: echo "duration=$(( $(date +%s) - ${{ steps.bt0.outputs.start }} ))" >> $GITHUB_OUTPUT

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Mark start time
        id: t0
        run: echo "start_time=$(date +%s)" >> $GITHUB_OUTPUT

      - name: Checkout
        uses: actions/checkout@v4

      - name: Copy docker-compose.prod.yml to VPS
        uses: appleboy/scp-action@v0.1.5
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          source: "docker-compose.prod.yml"
          target: "${{ secrets.VPS_APP_DIR }}"

      - name: SSH to VPS and deploy
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          envs: DOCKERHUB_USERNAME,DOCKERHUB_TOKEN,VPS_APP_DIR,DOCKER_IMAGE
          script: |
            set -euo pipefail

            APP_DIR="${VPS_APP_DIR}"
            mkdir -p "${APP_DIR}" && cd "${APP_DIR}"

            if [ ! -f .env ]; then
              echo "ERROR: ${APP_DIR}/.env is missing." >&2
              exit 1
            fi

            echo "üîê Docker Hub login on VPS‚Ä¶"
            echo "${DOCKERHUB_TOKEN}" | docker login -u "${DOCKERHUB_USERNAME}" --password-stdin

            echo "‚¨áÔ∏è Pull & Up‚Ä¶"
            docker compose -f docker-compose.prod.yml pull || true
            docker compose -f docker-compose.prod.yml up -d

            echo "üßπ Prune‚Ä¶"
            docker image prune -f

      - name: Calculate deploy duration
        id: duration
        run: echo "duration=$(( $(date +%s) - ${{ steps.t0.outputs.start_time }} ))" >> $GITHUB_OUTPUT

      - name: Calculate total duration
        id: total
        env:
          BUILD_DUR: ${{ needs.build-and-push.outputs.build_duration }}
          DEPLOY_DUR: ${{ steps.duration.outputs.duration }}
        run: echo "total=$(( BUILD_DUR + DEPLOY_DUR ))" >> $GITHUB_OUTPUT

      - name: Notify Telegram (success)
        if: success()
        run: |
          REPO="${GITHUB_REPOSITORY}"
          SHA_SHORT="${GITHUB_SHA::7}"
          RUN_URL="https://github.com/${REPO}/actions/runs/${GITHUB_RUN_ID}"
          IMG_TAG="${{ env.DOCKER_IMAGE }}:${GITHUB_SHA}"

          TEXT="<b>‚úÖ Deploy success</b>%0A\
          Repo: <code>${REPO}</code>%0A\
          Commit: <code>${SHA_SHORT}</code>%0A\
          Image: <code>${IMG_TAG}</code>%0A\
          <a href=\"${RUN_URL}\">Open workflow run</a>"

          curl -sS -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage" \
            -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d "text=${TEXT}" \
            -d "parse_mode=HTML" > /dev/null

      - name: Notify Telegram (failure)
        if: failure()
        run: |
          REPO="${GITHUB_REPOSITORY}"
          SHA_SHORT="${GITHUB_SHA::7}"
          RUN_URL="https://github.com/${REPO}/actions/runs/${GITHUB_RUN_ID}"

          TEXT="<b>‚ùå Deploy failed</b>%0A\
          Repo: <code>${REPO}</code>%0A\
          Commit: <code>${SHA_SHORT}</code>%0A\
          <a href=\"${RUN_URL}\">Open workflow run</a>"

          curl -sS -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage" \
            -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d "text=${TEXT}" \
            -d "parse_mode=HTML" > /dev/null
